# Install required libraries

!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib gspread
!pip install requests
OUTPUT:
Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.11/dist-packages (2.173.0)
Collecting google-api-python-client
  Downloading google_api_python_client-2.174.0-py3-none-any.whl.metadata (7.0 kB)
Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.11/dist-packages (0.2.0)
Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.11/dist-packages (1.2.2)
Requirement already satisfied: gspread in /usr/local/lib/python3.11/dist-packages (6.2.1)
Requirement already satisfied: httplib2<1.0.0,>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (0.22.0)
Requirement already satisfied: google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (2.38.0)
Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (2.25.1)
Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (4.2.0)
Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib) (2.0.0)
Requirement already satisfied: googleapis-common-protos<2.0.0,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (1.70.0)
Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (5.29.5)
Requirement already satisfied: proto-plus<2.0.0,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (1.26.1)
Requirement already satisfied: requests<3.0.0,>=2.18.0 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2.32.3)
Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (5.5.2)
Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (0.4.2)
Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (4.9.1)
Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2<1.0.0,>=0.19.0->google-api-python-client) (3.2.3)
Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.3.1)
Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (0.6.1)
Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (3.4.2)
Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2.4.0)
Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2025.6.15)
Downloading google_api_python_client-2.174.0-py3-none-any.whl (13.7 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 13.7/13.7 MB 35.0 MB/s eta 0:00:00
Installing collected packages: google-api-python-client
  Attempting uninstall: google-api-python-client
    Found existing installation: google-api-python-client 2.173.0
    Uninstalling google-api-python-client-2.173.0:
      Successfully uninstalled google-api-python-client-2.173.0
Successfully installed google-api-python-client-2.174.0
ERROR: unknown command "install requests" - maybe you meant "install"

[ ]
#cell2
# Upload Gmail credentials.json file securely via Colab uploader
from google.colab import files
uploaded = files.upload()

#cell3
import os
import pickle
import base64
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

from google_auth_oauthlib.flow import Flow

flow = Flow.from_client_secrets_file(
    'credentials.json',
    scopes=SCOPES,
    redirect_uri='urn:ietf:wg:oauth:2.0:oob'
)
auth_url, _ = flow.authorization_url(prompt='consent')

print("Please visit this URL to authorize:")
print(auth_url)

# Paste authorization code
code = input("Enter authorization code: ")
flow.fetch_token(code=code)
creds = flow.credentials

# Finally build Gmail service object
service = build('gmail', 'v1', credentials=creds)

Please visit this URL to authorize:
https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=526551064160-lg7d09fl8ohh738kkdknbsupcnvfmpmu.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.readonly&state=FfCqfA0Pc4VWkW3sMrceGd2ZTERBXJ&prompt=consent&access_type=offline
Enter authorization code: 4/1AVMBsJjAFLezgub2ym8CHr3mpOQjsVSXg1uz9Ke8_Y4GSP_gfFvTeNYkTQk


#Cell4
# Fetch recent 5 emails for processing
results = service.users().messages().list(userId='me', maxResults=5).execute()
messages = results.get('messages', [])
email_bodies = []

for msg in messages:
    txt = service.users().messages().get(userId='me', id=msg['id']).execute()
    payload = txt['payload']
    parts = payload.get("parts")

    email_text = None
    if parts:
        for part in parts:
            if part.get("mimeType") == "text/plain" or part.get("mimeType") == "text/html":
                if part.get("body") and part['body'].get('data'):
                    data = part['body'].get('data')
                    byte_code = base64.urlsafe_b64decode(data)
                    email_text = byte_code.decode("utf-8")
                    break # Found a text part, no need to check further
    elif payload.get("body") and payload['body'].get('data'):
        # Handle cases where the body is directly in the payload (less common for complex emails)
        data = payload['body'].get('data')
        byte_code = base64.urlsafe_b64decode(data)
        email_text = byte_code.decode("utf-8")


    if email_text:
        email_bodies.append(email_text)


print("✅ Successfully fetched", len(email_bodies), "emails for AI analysis.")

#Cell5
import google.generativeai as genai
from google.colab import userdata
import os

# Load Gemini API Key securely from Colab Secrets
os.environ["GEMINI_API_KEY"] = userdata.get('GEMINI_API_KEY')

# Configure Gemini API
genai.configure(api_key=os.environ["GEMINI_API_KEY"])

# Define the system prompt
system_prompt = """
You are an Enterprise Smart Notification Agent for campus automation.

Your task for each email:
1. Generate a 5-line summary.
2. Extract action deadlines and tasks.
3. Classify category: Academic, HR, Finance, IT, General.
4. Assign urgency: Critical, High, Normal.
5. Extract: Action required? Yes/No.

Output strictly in format:
Summary: <summary>
Category: <category>
Urgency: <urgency>
Action: <yes/no>
"""

# Load the Gemini model
model = genai.GenerativeModel(model_name="gemini-2.5-flash")

# Smart Notification Agent function
def smart_notification_agent(email_text):
    prompt = f"{system_prompt}\n\nEmail:\n{email_text}"
    response = model.generate_content(prompt)
    return response.text.strip()

# Loop over fetched emails (assume email_bodies is a list of email texts)
for idx, email_text in enumerate(email_bodies):
    print(f"\n===== Email {idx+1} =====")
    result = smart_notification_agent(email_text)
    print(result)
